"use strict";(()=>{var e={};e.id=961,e.ids=[961],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8745:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>q,patchFetch:()=>f,requestAsyncStorage:()=>m,routeModule:()=>c,serverHooks:()=>g,staticGenerationAsyncStorage:()=>l});var r={};s.r(r),s.d(r,{GET:()=>d,POST:()=>p});var o=s(9303),a=s(8716),i=s(3131),u=s(7070);let n=new(s(3524)).PrismaClient;async function p(e){try{let t=await e.json();for(let e of["name","purpose","description","requestedBy"])if(!t[e])return u.NextResponse.json({success:!1,error:`Missing required field: ${e}`},{status:400});let s={name:t.name,purpose:t.purpose,description:t.description,category:t.category||"Community Building",estimatedMembers:t.estimatedMembers||"5-15",timeCommitment:t.timeCommitment||"2-4 hours/week",skillsNeeded:t.skillsNeeded||[],expectedOutcomes:t.expectedOutcomes||[],tools:t.tools||[],tags:t.tags||[],requestedBy:t.requestedBy,requestType:t.requestType||"custom",status:"pending",requestedAt:new Date},r=await n.focusRoom.create({data:{name:s.name,purpose:s.purpose,description:s.description,tags:s.tags,status:"active",isPrivate:!1,maxMembers:parseInt(s.estimatedMembers.split("-")[1])||15,clubId:"default-club-id"}});return u.NextResponse.json({success:!0,message:"Room request submitted successfully",data:{requestId:r.id,roomId:r.id,status:"approved",room:{id:r.id,name:r.name,purpose:r.purpose,description:r.description}}})}catch(e){if(console.error("Room request error:",e),e&&"object"==typeof e&&"code"in e&&"P2002"===e.code)return u.NextResponse.json({success:!1,error:"A room with this name already exists"},{status:409});return u.NextResponse.json({success:!1,error:"Failed to submit room request. Please try again."},{status:500})}}async function d(e){try{let{searchParams:t}=new URL(e.url),s=t.get("status")||"all",r=parseInt(t.get("limit")||"50"),o=parseInt(t.get("offset")||"0"),a=(await n.focusRoom.findMany({where:"all"===s?{}:{status:s},orderBy:{createdAt:"desc"},take:r,skip:o,include:{_count:{select:{members:!0}}}})).map(e=>({id:e.id,name:e.name,purpose:e.purpose,description:e.description,status:e.status,memberCount:e._count.members,createdAt:e.createdAt,tags:e.tags}));return u.NextResponse.json({success:!0,data:{requests:a,total:a.length,hasMore:a.length===r}})}catch(e){return console.error("Failed to fetch room requests:",e),u.NextResponse.json({success:!1,error:"Failed to fetch room requests"},{status:500})}}let c=new o.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/rooms/request/route",pathname:"/api/rooms/request",filename:"route",bundlePath:"app/api/rooms/request/route"},resolvedPagePath:"C:\\dev\\kamunity-final\\src\\app\\api\\rooms\\request\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:m,staticGenerationAsyncStorage:l,serverHooks:g}=c,q="/api/rooms/request/route";function f(){return(0,i.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:l})}}};var t=require("../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[948,972],()=>s(8745));module.exports=r})();